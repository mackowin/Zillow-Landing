{"remainingRequest":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/src/views/ideas/green-card/UscisGreenCard.vue?vue&type=template&id=7499b5c8&","dependencies":[{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/src/views/ideas/green-card/UscisGreenCard.vue","mtime":1669058515161},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1611962713166},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/index.js","mtime":1611962713166}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCBbCiAgICBfYygKICAgICAgImhlYWRlciIsCiAgICAgIHsKICAgICAgICBjbGFzczogWyJoZWFkcm9vbSIsIHsgImlzLXN0aWNreSI6IF92bS5pc1N0aWNreSB9XSwKICAgICAgICBhdHRyczogeyBpZDogImhlYWRlciIgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzdGFydHAtbmF2IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibmF2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2YmFyIG5hdmJhci1leHBhbmQtbWQgbmF2YmFyLWxpZ2h0IiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2YmFyLWJyYW5kIiwgYXR0cnM6IHsgdG86ICIvIiB9IH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxNTBweCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9yZXNvdXJjZXMvc2VsZnBldGl0aW9udXNhLWxvZ28uc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIlNlbGYgUGV0aXRpb24gVVNBIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfdm0uX20oMCkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdCiAgICApLAogICAgX2MoCiAgICAgICJzZWN0aW9uIiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAiZmVlZGJhY2stYXJlYSBwdGItODAgYmctZjlmYWZiIiwKICAgICAgICBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIzcmVtIiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogInRlc3RpbW9uaWFscyIgfSB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX20oMSksCiAgICAgICAgICAgICAgX2MoIlByaWNlT2ZmZXIiLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWJvdHRvbSI6ICIzcmVtIiwgIm1hcmdpbi10b3AiOiAiMHJlbSIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgICAgICBfdm0uX20oMyksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyb3cgc2VydmljZS1hY3Rpb24tYnRucyIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tdG9wIjogIjByZW0iLCAibWFyZ2luLWJvdHRvbSI6ICI0cmVtIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC14bC03IGNvbC1sZy05IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tOCBjb2wtMTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1hc3Nlc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIi9ncmVlbi1jYXJkLWV2YWx1YXRpb24iIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS4kZ3RhZy5ldmVudCgicmVnaXN0ZXIiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJDaGVjayBFQi0yIE5JVyBlbGlnaWJpbGl0eSIpXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX20oNCksCiAgICAgICAgICAgICAgX3ZtLl9tKDUpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicm93IHNlcnZpY2UtYWN0aW9uLWJ0bnMiLAogICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIwcmVtIiwgIm1hcmdpbi1ib3R0b20iOiAiNHJlbSIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wteGwtNyBjb2wtbGctOSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTggY29sLTEwIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tcHJpbWFyeSBidG4tYXNzZXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIvZ3JlZW4tY2FyZC1ldmFsdWF0aW9uIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJGd0YWcuZXZlbnQoInJlZ2lzdGVyIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiQ2hlY2sgRUItMiBOSVcgZWxpZ2liaWxpdHkiKV0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0KICAgICksCiAgICBfYygKICAgICAgImZvb3RlciIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJmb290ZXItYXJlYSBiZy1mN2ZhZmQiIH0sCiAgICAgIFsKICAgICAgICBfdm0uX20oNiksCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWFwIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9yZXNvdXJjZXMvbWFwLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJlYjIgbml3IGdyZWVuIGNhcmQiCiAgICAgICAgICB9CiAgICAgICAgfSksCiAgICAgICAgX3ZtLl9tKDcpLAogICAgICAgIF92bS5fbSg4KSwKICAgICAgICBfYygiYmFjay10by10b3AiLCB7IGF0dHJzOiB7IGJvdHRvbTogIjUwcHgiLCByaWdodDogIjUwcHgiIH0gfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZ28tdG9wIiB9LAogICAgICAgICAgICBbX2MoImZlYXRoZXIiLCB7IGF0dHJzOiB7IHR5cGU6ICJhcnJvdy11cCIgfSB9KV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdLAogICAgICAxCiAgICApCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInVsIiwgeyBzdGF0aWNDbGFzczogIm5hdiBtbC1hdXRvIiB9LCBbCiAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSIgfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIHVzY2lzLW1lbnUiLCBhdHRyczogeyBocmVmOiAiLyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkhvbWUiKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogInNlY3Rpb24tdGl0bGUiLAogICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAiYmFja2dyb3VuZC1jb2xvciI6ICJ3aGl0ZSIsCiAgICAgICAgICBwYWRkaW5nOiAiMXJlbSIsCiAgICAgICAgICAidGV4dC1hbGlnbiI6ICJqdXN0aWZ5IiwKICAgICAgICAgICJ0ZXh0LWp1c3RpZnkiOiAiaW50ZXItd29yZCIKICAgICAgICB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJFQi0yIEVsaWdpYmlsaXR5IENyaXRlcmlhIildKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJhciIsIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tbGVmdCI6ICIwIiB9IH0pLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgbWFyZ2luOiAiMXJlbSIsCiAgICAgICAgICAgICAgIm1hcmdpbi10b3AiOiAiMnJlbSIsCiAgICAgICAgICAgICAgIm1heC13aWR0aCI6ICIxMDAwcHgiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiWW91IG1heSBiZSBlbGlnaWJsZSBmb3IgRUItMiB2aXNhIGlmIHlvdSBzYXRpc2Z5IG9uZSBvZiB0aGUgdHdvIHJlcXVpcmVtZW50czogIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIxcmVtIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgImZvbnQtd2VpZ2h0IjogIjUwMCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkFkdmFuY2VkIGRlZ3JlZTogIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiTmVlZCB0byBwb3NzZXNzIGFkdmFuY2VkIGRlZ3JlZSAoTWFzdGVyJ3MsIFBoRCBldGMpIG9yIGl0cyBmb3JlaWduIGVxdWl2YWxlbnQuIEFsdGVybmF0aXZlbHkgYSBiYWNjYWxhdXJlYXRlIG9yIGZvcmVpZ24gZXF1aXZhbGVudCBwbHVzIDUgeWVhcnMgb2YgcG9zdC1iYWNjYWxhdXJlYXRlLCBwcm9ncmVzc2l2ZSB3b3JrIGV4cGVyaWVuY2UgaW4gdGhlIGZpZWxkLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIxcmVtIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgImZvbnQtd2VpZ2h0IjogIjUwMCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkV4Y2VwdGlvbmFsIEFiaWxpdHk6ICIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIm11c3QgYmUgYWJsZSB0byBzaG93IGV4Y2VwdGlvbmFsIGFiaWxpdHkgaW4gdGhlIHNjaWVuY2VzLCBhcnRzLCBvciBidXNpbmVzcy4gRXhjZXB0aW9uYWwgYWJpbGl0eSDigJxtZWFucyBhIGRlZ3JlZSBvZiBleHBlcnRpc2Ugc2lnbmlmaWNhbnRseSBhYm92ZSB0aGF0IG9yZGluYXJpbHkgZW5jb3VudGVyZWQgaW4gdGhlIHNjaWVuY2VzLCBhcnRzLCBvciBidXNpbmVzcy7igJ0uIFlvdSBtdXN0IG1lZXQgYXQgbGVhc3QgdGhyZWUgb2YgdGhlIGNyaXRlcmlhIGJlbG93OiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygidWwiLCB7IHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tdG9wIjogIjFyZW0iIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi1sZWZ0IjogIjByZW0iIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiT2ZmaWNpYWwgYWNhZGVtaWMgcmVjb3JkIHNob3dpbmcgdGhhdCB5b3UgaGF2ZSBhIGRlZ3JlZSwgZGlwbG9tYSwgY2VydGlmaWNhdGUsIG9yIHNpbWlsYXIgYXdhcmQgZnJvbSBhIGNvbGxlZ2UsIHVuaXZlcnNpdHksIHNjaG9vbCwgb3Igb3RoZXIgaW5zdGl0dXRpb24gb2YgbGVhcm5pbmcgcmVsYXRpbmcgdG8geW91ciBhcmVhIG9mIGV4Y2VwdGlvbmFsIGFiaWxpdHkuIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi1sZWZ0IjogIjByZW0iIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiTGV0dGVycyBmcm9tIGN1cnJlbnQgb3IgZm9ybWVyIGVtcGxveWVycyBkb2N1bWVudGluZyBhdCBsZWFzdCAxMCB5ZWFycyBvZiBmdWxsLXRpbWUgZXhwZXJpZW5jZSBpbiB5b3VyIG9jY3VwYXRpb24uIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi1sZWZ0IjogIjByZW0iIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiQSBsaWNlbnNlIHRvIHByYWN0aWNlIHlvdXIgcHJvZmVzc2lvbiBvciBjZXJ0aWZpY2F0aW9uIGZvciB5b3VyIHByb2Zlc3Npb24gb3Igb2NjdXBhdGlvbi4iCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWxlZnQiOiAiMHJlbSIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJFdmlkZW5jZSB0aGF0IHlvdSBoYXZlIGNvbW1hbmRlZCBhIHNhbGFyeSBvciBvdGhlciByZW11bmVyYXRpb24gZm9yIHNlcnZpY2VzIHRoYXQgZGVtb25zdHJhdGVzIHlvdXIgZXhjZXB0aW9uYWwgYWJpbGl0eS4iCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWxlZnQiOiAiMHJlbSIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIk1lbWJlcnNoaXAgaW4gYSBwcm9mZXNzaW9uYWwgYXNzb2NpYXRpb24ocykuIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tbGVmdCI6ICIwcmVtIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIlJlY29nbml0aW9uIGZvciB5b3VyIGFjaGlldmVtZW50cyBhbmQgc2lnbmlmaWNhbnQgY29udHJpYnV0aW9ucyB0byB5b3VyIGluZHVzdHJ5IG9yIGZpZWxkIGJ5IHlvdXIgcGVlcnMsIGdvdmVybm1lbnQgZW50aXRpZXMsIHByb2Zlc3Npb25hbCBvciBidXNpbmVzcyBvcmdhbml6YXRpb25zLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tbGVmdCI6ICIwcmVtIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIk90aGVyIGNvbXBhcmFibGUgZXZpZGVuY2Ugb2YgZWxpZ2liaWxpdHkgaXMgYWxzbyBhY2NlcHRhYmxlLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgIm1hcmdpbi1sZWZ0IjogIjFyZW0iLAogICAgICAgICAgICAgICJtYXgtd2lkdGgiOiAiMTAwMHB4IiwKICAgICAgICAgICAgICAidGV4dC1kZWNvcmF0aW9uIjogInVuZGVybGluZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cudXNjaXMuZ292L3dvcmtpbmctaW4tdGhlLXVuaXRlZC1zdGF0ZXMvcGVybWFuZW50LXdvcmtlcnMvZW1wbG95bWVudC1iYXNlZC1pbW1pZ3JhdGlvbi1zZWNvbmQtcHJlZmVyZW5jZS1lYi0yIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiUmVhZCBtb3JlIG9uIFVTQ0lTIHdlYnNpdGUiKV0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLXRpdGxlIiwKICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgImJhY2tncm91bmQtY29sb3IiOiAid2hpdGUiLAogICAgICAgICAgcGFkZGluZzogIjFyZW0iLAogICAgICAgICAgInRleHQtYWxpZ24iOiAianVzdGlmeSIsCiAgICAgICAgICAidGV4dC1qdXN0aWZ5IjogImludGVyLXdvcmQiCiAgICAgICAgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImgyIiwgW192bS5fdigiTmF0aW9uYWwgSW50ZXJlc3QgV2FpdmVyIildKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJhciIsIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tbGVmdCI6ICIwIiB9IH0pLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgbWFyZ2luOiAiMXJlbSIsCiAgICAgICAgICAgICAgIm1hcmdpbi10b3AiOiAiMnJlbSIsCiAgICAgICAgICAgICAgIm1heC13aWR0aCI6ICIxMDAwcHgiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGhvc2Ugc2Vla2luZyBhIG5hdGlvbmFsIGludGVyZXN0IHdhaXZlciBhcmUgcmVxdWVzdGluZyB0aGF0IHRoZSBqb2Igb2ZmZXIsIGFuZCB0aHVzIHRoZSBsYWJvciBjZXJ0aWZpY2F0aW9uLCBiZSB3YWl2ZWQgYmVjYXVzZSBpdCBpcyBpbiB0aGUgaW50ZXJlc3Qgb2YgdGhlIFVuaXRlZCBTdGF0ZXMuIFRoaXMgaXMgY2FsbGVkIHNlbGYtcGV0aXRpb24sIHNvIHlvdSBkbyBub3QgbmVlZCBhbiBlbXBsb3llciB0byBzcG9uc29yIHlvdXIgZ3JlZW4gY2FyZC4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjFyZW0iLCAibWF4LXdpZHRoIjogIjEwMDBweCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJbiBvdGhlciB3b3JkcyB5b3UgY2FuIGFwcGx5IGZvciBFQi0yIE5hdGlvbmFsIEludGVyZXN0IFdhaXZlciAoTklXKSB3aXRob3V0IHBlcm1hbmVudCBqb2Igb2ZmZXIgZnJvbSBVLlMuIGVtcGxveWVyLiBJdCBpcyB2ZXJ5IGZhc3QgcHJvY2VzcyBiZWNhdXNlIE5JVyB3YWl2ZXMgbGVuZ3RoeSBMYWJvciBDZXJ0aWZpY2F0aW9uLiBFQi0yIE5JVyBncmVlbiBjYXJkIGlzIG5vdCBsaW5rZWQgdG8gdGhlIGVtcGxveWVyIHNvIHlvdSBjb3VsZCBjaGFuZ2UgeW91ciBqb2IgYXMgbG9uZyBhcyB5b3VyIGNhc2Ugc3RvcnkgcmVtYWlucyB2YWxpZC4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMXJlbSIsICJtYXgtd2lkdGgiOiAiMTAwMHB4IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZvciBOSVcgeW91IG11c3Qgc2F0aXNmeSBhbGwgMyBlbGVtZW50cyAoTWF0dGVyIG9mIERoYW5hc2FyKTogIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWxlZnQiOiAiMHJlbSIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlRoZSBwcm9wb3NlZCBlbmRlYXZvciBoYXMgYm90aCBzdWJzdGFudGlhbCBtZXJpdCBhbmQgbmF0aW9uYWwgaW1wb3J0YW5jZS4iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWxlZnQiOiAiMHJlbSIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIllvdSBhcmUgd2VsbCBwb3NpdGlvbmVkIHRvIGFkdmFuY2UgdGhlIHByb3Bvc2VkIGVuZGVhdm9yLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tbGVmdCI6ICIwcmVtIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiT24gYmFsYW5jZSwgaXQgd291bGQgYmUgYmVuZWZpY2lhbCB0byB0aGUgVW5pdGVkIFN0YXRlcyB0byB3YWl2ZSB0aGUgcmVxdWlyZW1lbnRzIG9mIGEgam9iIG9mZmVyLCBhbmQgdGh1cyB0aGUgbGFib3IgY2VydGlmaWNhdGlvbi4iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAibWFyZ2luLWxlZnQiOiAiMXJlbSIsCiAgICAgICAgICAgICAgIm1heC13aWR0aCI6ICIxMDAwcHgiLAogICAgICAgICAgICAgICJ0ZXh0LWRlY29yYXRpb24iOiAidW5kZXJsaW5lIgogICAgICAgICAgICB9LAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL3d3dy51c2Npcy5nb3Yvd29ya2luZy1pbi10aGUtdW5pdGVkLXN0YXRlcy9wZXJtYW5lbnQtd29ya2Vycy9lbXBsb3ltZW50LWJhc2VkLWltbWlncmF0aW9uLXNlY29uZC1wcmVmZXJlbmNlLWViLTIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJSZWFkIG1vcmUgb24gVVNDSVMgd2Vic2l0ZSIpXQogICAgICAgICkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogInNlY3Rpb24tdGl0bGUiLAogICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAiYmFja2dyb3VuZC1jb2xvciI6ICJ3aGl0ZSIsCiAgICAgICAgICBwYWRkaW5nOiAiMXJlbSIsCiAgICAgICAgICAidGV4dC1hbGlnbiI6ICJqdXN0aWZ5IiwKICAgICAgICAgICJ0ZXh0LWp1c3RpZnkiOiAiaW50ZXItd29yZCIKICAgICAgICB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJXaGF0IG5hdGlvbmFsaXRpZXMgY2FuIGN1cnJlbnRseSBmaWxlPyIpXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJiYXIiLCBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWxlZnQiOiAiMCIgfSB9KSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgIG1hcmdpbjogIjFyZW0iLAogICAgICAgICAgICAgICJtYXJnaW4tdG9wIjogIjJyZW0iLAogICAgICAgICAgICAgICJtYXgtd2lkdGgiOiAiMTAwMHB4IgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkluZGl2aWR1YWxzIHNlZWtpbmcgdG8gZmlsZSBhcHBsaWNhdGlvbnMgZm9yIGFkanVzdG1lbnQgb2Ygc3RhdHVzIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgcHJpb3JpdHkgZGF0ZSBmb3IgdGhlaXIgbmF0aW9uYWxpdHkgaXMgY3VycmVudCAoY291bnRyeSBvZiBiaXJ0aCBpZiB5b3UgaGF2ZSBtdWx0aXBsZSBuYXRpb25hbGl0aWVzKS4gQ3VycmVudGx5IHRoZXJlIGlzIGJhY2tsb2cgb2YgY2FzZXMgZm9yIGV4YW1wbGUgZm9yIENoaW5lc2Ugb3IgSW5kaWFuIGNpdGl6ZW5zLiIKICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMXJlbSIsICJtYXgtd2lkdGgiOiAiMTAwMHB4IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlByaW9yaXR5IGRhdGVzIGNoYW5nZSBldmVyeSBtb250aCBhbmQgVVNDSVMgd29ya3MgaGFyZCB0byByZXNvbHZlIGV4aXN0aW5nIGJhY2tsb2cuIFJldmlldyBjdXJyZW50IGFuZCB1cGNvbWluZyBidWxsZXRpbiBpbiB0aGUgbGluayBiZWxvdzoiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgIm1hcmdpbi1sZWZ0IjogIjFyZW0iLAogICAgICAgICAgICAgICJtYXgtd2lkdGgiOiAiMTAwMHB4IiwKICAgICAgICAgICAgICAidGV4dC1kZWNvcmF0aW9uIjogInVuZGVybGluZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly90cmF2ZWwuc3RhdGUuZ292L2NvbnRlbnQvdHJhdmVsL2VuL2xlZ2FsL3Zpc2EtbGF3MC92aXNhLWJ1bGxldGluLmh0bWwiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJDaGVjayBwcmlvcml0eSBkYXRlIGluIFZpc2EgQnVsbGV0aW4iKV0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgbWFyZ2luOiAiMXJlbSIsCiAgICAgICAgICAgICAgIm1hcmdpbi10b3AiOiAiMC41cmVtIiwKICAgICAgICAgICAgICAibWF4LXdpZHRoIjogIjEwMDBweCIsCiAgICAgICAgICAgICAgY29sb3I6ICIjNjA4NGE0IgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIj4+PiBJbiB0aGUgYnVsbGV0aW4gbG9vayBmb3IgMm5kIHVuZGVyIGNhdGVnb3J5IEVtcGxveW1lbnQtYmFzZWQiCiAgICAgICAgICAgICkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLXRpdGxlIiwKICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgImJhY2tncm91bmQtY29sb3IiOiAid2hpdGUiLAogICAgICAgICAgcGFkZGluZzogIjFyZW0iLAogICAgICAgICAgInRleHQtYWxpZ24iOiAianVzdGlmeSIsCiAgICAgICAgICAidGV4dC1qdXN0aWZ5IjogImludGVyLXdvcmQiCiAgICAgICAgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImgyIiwgW192bS5fdigiSG93IG11Y2ggZG9lcyBpdCBjb3N0PyIpXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJiYXIiLCBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWxlZnQiOiAiMCIgfSB9KSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgIG1hcmdpbjogIjFyZW0iLAogICAgICAgICAgICAgICJtYXJnaW4tdG9wIjogIjJyZW0iLAogICAgICAgICAgICAgICJtYXgtd2lkdGgiOiAiMTAwMHB4IgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiWW91IGNhbiBzZWxmLXBldGl0aW9uIHdpdGggb3Igd2l0aG91dCBhIGxhd3llci4iKV0KICAgICAgICApLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjFyZW0iLCAibWF4LXdpZHRoIjogIjEwMDBweCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGaWxpbmcgZmVlcyBhcmUgYXJvdW5kICQyayBwZXIgYXBwbGljYW50LiBJZiB5b3UgZGVjaWRlIHRvIGZpbGUgd2l0aCBhIGxhd3llciwgdHlwaWNhbCBsZWdhbCBmZWVzIGFyZSBhcm91bmQgJDhrIGZvciB0aGUgbWFpbiBhcHBsaWNhbnQgKGRlcGVuZGVudHMsIGxpa2UgY2hpbGRyZW4gJiBzcG91c2VzLCB1c3VhbGx5IGF0IH41MCUgZGlzY291bnQpLiBUaGUgZXhhY3QgZmlndXJlIG1pZ2h0IGRlcGVuZCBvbiB0aGUgY29tcGxleGl0eSBvZiB5b3VyIGNhc2UgYW5kIHRoZSBsYXd5ZXIgdGhhdCB5b3UgZGVjaWRlZCB0byB3b3JrIHdpdGguIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjFyZW0iLCAibWF4LXdpZHRoIjogIjEwMDBweCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkNoZWNrIG91ciBzZWxmLWFwcGx5IHN0YXJ0ZXIga2l0LiIpLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgRXZlbiBpZiB5b3UgYXBwbHkgd2l0aCBhIGxhd3llciwgeW91IHdpbGwgc3RpbGwgbmVlZCB0byBwcmVwYXJlIHJlZmVyZW5jZSBsZXR0ZXJzIGFuZCBwb3NzaWJseSBhbHNvIGEgY292ZXIgbGV0dGVyLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAibWFyZ2luLWxlZnQiOiAiMXJlbSIsCiAgICAgICAgICAgICAgIm1heC13aWR0aCI6ICIxMDAwcHgiLAogICAgICAgICAgICAgICJ0ZXh0LWRlY29yYXRpb24iOiAidW5kZXJsaW5lIgogICAgICAgICAgICB9LAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL2NoZWNrb3V0LnN0cmlwZS5jb20vcGF5L2NzX2xpdmVfYTFxTnlHamFQQ2ZBUUZ1ajdNQm9vWHVwUnQwbjNndHFmaU50c3Y3SzB6QUdrb05FZWUwQjFzdmtJbiNmaWRrZFd4T1lId25QeWQxYmxwcGJITmdXakEwVDI5MGNrTkJTR2xnU1d0cWRXSlRhekJUYm5KUlBVMWtkbUJnUmxCWFZFc3lZWFF4ZFVSQ1psSjNYR2xBWm5GRGRtMDBjbUpnU3pKWE4yMVNaanhuVDNaVWZHWnFhSHhtUEhWQ1ZYUk5WRkYxY0RjMVRtZExOVFZnUTBJMlFqVkFUQ2NwSjNWcGJHdHVRSDExYW5aZ1lVeGhKejhuTW5aTU1HdFFOWFYxTm5KMVpuTmdZMXhmSjNnbCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIlB1cmNoYXNlIG91ciBFQi0yIE5JVyB0ZW1wbGF0ZXMiKV0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLXRpdGxlIiwKICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgImJhY2tncm91bmQtY29sb3IiOiAid2hpdGUiLAogICAgICAgICAgcGFkZGluZzogIjFyZW0iLAogICAgICAgICAgInRleHQtYWxpZ24iOiAianVzdGlmeSIsCiAgICAgICAgICAidGV4dC1qdXN0aWZ5IjogImludGVyLXdvcmQiCiAgICAgICAgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImgyIiwgW192bS5fdigiU2hhbGwgSSBjaG9vc2UgY29uY3VycmVudCBvciBzZXBhcmF0ZSBmaWxpbmc/IildKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJhciIsIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tbGVmdCI6ICIwIiB9IH0pLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgbWFyZ2luOiAiMXJlbSIsCiAgICAgICAgICAgICAgIm1hcmdpbi10b3AiOiAiMnJlbSIsCiAgICAgICAgICAgICAgIm1heC13aWR0aCI6ICIxMDAwcHgiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVG8gb2J0YWluIGFuIE5JVyBHcmVlbiBDYXJkLCB5b3UgbXVzdCBmaWxlIEktMTQwIEltbWlncmFudCBQZXRpdGlvbiBhbmQgYW4gSS00ODUgQWRqdXN0bWVudCBvZiBTdGF0dXMgQXBwbGljYXRpb24uIFRoZXNlIGNvdWxkIGJlIGZpbGVkIGNvbmN1cnJlbnRseSBvciBzZXBhcmF0ZWx5LiAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tdG9wIjogIjAuNXJlbSIsICJtYXJnaW4tbGVmdCI6ICIwcmVtIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgImZvbnQtd2VpZ2h0IjogIjUwMCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDb25jdXJyZW50IEZpbGluZzogIikKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEhhcyBiZW5lZml0cyBvZiBmYXN0ZXIgcHJvY2VzcyB3aXRoIGNoYW5jZXMgb2YgcmVjZWl2aW5nIHdvcmsgcGVybWl0IChFQUQpIGFuZCB0cmF2ZWwgYXV0aG9yaXphdGlvbiAoQWR2YW5jZSBQYXJvbGUpIHNvb25lci4gQ291bGQgYmUgY29uc2lkZXJlZCBpZiB5b3UgaGF2ZSBhIHN0cm9uZyBOSVcgcHJvZmlsZS4gUHJpb3JpdHkgZGF0ZSBtdXN0IGJlIGN1cnJlbnQgdG8gZmlsZSBJLTQ4NSBBZGp1c3RtZW50IG9mIFN0YXR1cyBBcHBsaWNhdGlvbiB0b2dldGhlciB3aXRoIE5JVyBJLTE0MC4iCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi10b3AiOiAiMC41cmVtIiwgIm1hcmdpbi1sZWZ0IjogIjByZW0iIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNTdHlsZTogeyAiZm9udC13ZWlnaHQiOiAiNTAwIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlNlcGFyYXRlIEZpbGluZzogIikKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiSW4gY2FzZSBJLTE0MCBpcyBkZW5pZWQgeW91IGNvdWxkIHNhdmUgbW9uZXkgb24gc2Vjb25kIHN0YWdlLCBpZS4gSS00ODUuIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTMgY29sLW1kLTYgY29sLXNtLTYiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2luZ2xlLWZvb3Rlci13aWRnZXQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsb2dvIiB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvIiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxMzBweCIsCiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL3Jlc291cmNlcy9zZWxmcGV0aXRpb251c2EtbG9nby5zdmciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJjb250YWN0IFNlbGYgUGV0aXRpb24gVVNBIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgImZvbnQtd2VpZ2h0IjogIjYwMCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJTZWxmLXBldGl0aW9uIGdyZWVuIGNhcmQgZm9yIHByb2Zlc3Npb25hbHMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCJUYWtlIG1hdHRlcnMgaW50byB5b3VyIG93biBoYW5kcyEiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTMgY29sLW1kLTYgY29sLXNtLTYiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2luZ2xlLWZvb3Rlci13aWRnZXQiIH0sIFsKICAgICAgICAgICAgX2MoImgzIiwgW192bS5fdigiU3VwcG9ydCIpXSksCiAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJsaXN0IiB9LCBbCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiL0dyZWVuY2FyZF9UZXJtc19vZl9TZXJ2aWNlLnBkZiIgfSB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJUZXJtcyBvZiBTZXJ2aWNlIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvR3JlZW5jYXJkX1ByaXZhY3lfUG9saWN5LnBkZiIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJpdmFjeSBQb2xpY3kiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICIvR3JlZW5jYXJkX1dlYnNpdGVfVGVybXNfYW5kX0NvbmRpdGlvbnMucGRmIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiVGVybXMgYW5kIENvbmRpdGlvbnMiKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1sZy0xMiBjb2wtbWQtMTIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29weXJpZ2h0LWFyZWEiIH0sIFsKICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDb3B5cmlnaHQgwqkyMDIyIFNlbGYgUGV0aXRpb24gVVNBLiBBbGwgUmlnaHRzIFJlc2VydmVkIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICJ0ZXh0LWFsaWduIjogImp1c3RpZnkiLAogICAgICAgICAgICAgICAgICAidGV4dC1qdXN0aWZ5IjogImludGVyLXdvcmQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgImZvbnQtc2l6ZSI6ICIxMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJBbGwgc3RhdGVtZW50cyBhcmUgc3ViamVjdCB0byBjZXJ0YWluIGNvbmRpdGlvbnMsIHN1YmplY3QgdG8gY2hhbmdlLCBtYXkgYmUgb3V0ZGF0ZWQgd2hlbiBhcHBseWluZywgbWF5IG5vdCBhcHBseSB0byB5b3VyIHBlcnNvbmFsIHNpdHVhdGlvbiBhbmQgbWF5IGJlIGxpbWl0ZWQgaW4gdGltZXNwYW4sIGFuZCBhcmUgbm90IGxlZ2FsbHkgb3IgZmlzY2FsbHkgYmluZGluZy4gUHJpY2luZyBtYXkgdmFyeSBiYXNlZCBvbiB5b3VyIHBlcnNvbmFsIHNpdHVhdGlvbi4gT25seSBhIGxhd3llciBjYW4gYWR2aXNlIHlvdSwgZm9yIGV4YW1wbGUgdGhlIGxhd3llciB3ZSBjb25uZWN0IHlvdSB3aXRoLCBvbiBob3cgeW91IGNhbiBwcm9jZWVkIGluIHlvdXIgdW5pcXVlIHBlcnNvbmFsIHNpdHVhdGlvbi4gRHVlIHRvIHRoZSBuYXR1cmUgb2YgdGhlIHdvcmssIGZlZXMgeW91IHBheSBhcmUgbm9uLXJlZnVuZGFibGUuIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjEwcHgiIH0gfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIlNlbGYgUGV0aXRpb24gVVNBIGRvZXMgbm90IHdhcnJhbnQgdGhlIGFjY3VyYWN5IG9yIHZhbGlkaXR5IG9mIHRoZSBpbmZvcm1hdGlvbiwgYW5kIGhlcmVieSBkaXNjbGFpbXMgYW55IGxpYWJpbGl0eSB0byBhbnkgcGVyc29uIGZvciBhbnkgbG9zcyBvciBkYW1hZ2UgY2F1c2VkIGJ5IGVycm9ycyBvciBvbWlzc2lvbnMgaW4gdGhpcyBkaXJlY3RvcnkuIFNlbGYgUGV0aXRpb24gVVNBIGFsc28gaXMgbm90IHJlc3BvbnNpYmxlIGZvciBhbnkgbWF0ZXJpYWwgb3IgaW5mb3JtYXRpb24gY29udGFpbmVkIGluIHRoZSBzaXRlcyBwcm92aWRlZCBieSBwYXJ0bmVyaW5nIGxhd3llcnMgb3IgYnkgcGFydG5lcnMgZGlyZWN0bHkuIFRoZSBpbmZvcm1hdGlvbiBwcmVzZW50ZWQgYXQgdGhpcyBzaXRlIHNob3VsZCBub3QgYmUgY29uc3RydWVkIHRvIGJlIGZvcm1hbCBsZWdhbCBhZHZpY2Ugb3IgdGhlIGZvcm1hdGlvbiBvZiBhIGxhd3llci9jbGllbnQgcmVsYXRpb25zaGlwLiIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2hhcGUxIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9yZXNvdXJjZXMvc2hhcGUxLnBuZyIpLAogICAgICAgICAgYWx0OiAibmF0aW9uYWwgaW50ZXJlc3Qgd2FpdmVyIgogICAgICAgIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2hhcGU4IHJvdGF0ZW1lIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9yZXNvdXJjZXMvc2hhcGUyLnN2ZyIpLAogICAgICAgICAgYWx0OiAic2VsZiBhcHBseSBmb3IgYSBncmVlbiBjYXJkIgogICAgICAgIH0KICAgICAgfSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}