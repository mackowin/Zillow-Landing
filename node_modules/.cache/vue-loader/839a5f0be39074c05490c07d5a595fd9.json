{"remainingRequest":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/src/views/ideas/green-card/components/FeedbackGreenCard.vue?vue&type=template&id=884c1f66&","dependencies":[{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/src/views/ideas/green-card/components/FeedbackGreenCard.vue","mtime":1662757194860},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1611962713166},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/index.js","mtime":1611962713166}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImZlZWRiYWNrLWFyZWEgcHRiLTgwIGJnLWY5ZmFmYiIgfSwgWwogICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJ0ZXN0aW1vbmlhbHMiIH0gfSwgWwogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmVlZGJhY2stc2xpZGVzIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2xpZW50LWZlZWRiYWNrIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInNsaWNrIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICByZWY6ICJzbGljayIsCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNsaWRlci1mb3IiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb3B0aW9uczogX3ZtLnNsaWNrT3B0aW9ucyB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIml0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzaW5nbGUtZmVlZGJhY2siLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBhZGRpbmctbGVmdCI6ICI0MHB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiMHB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQtYWxpZ24iOiAianVzdGlmeSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0LWp1c3RpZnkiOiAiaW50ZXItd29yZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIFtfdm0uX3YoIuKtkOKtkOKtkOKtkOKtkCIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJTVEVNIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgInBhZGRpbmctYm90dG9tIjogIjE1cHgiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiUHJvZHVjdCBNYW5hZ2VyIGluIEJpZyBUZWNoIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiSW4gMjAyMiwgVS5TLiBDaXRpemVuc2hpcCBhbmQgSW1taWdyYXRpb24gU2VydmljZXMgYW5ub3VuY2VkIHVwZGF0ZWQgZ3VpZGFuY2Ugb24gYWRqdWRpY2F0aW5nIHJlcXVlc3RzIGZvciBOYXRpb25hbCBJbnRlcmVzdCBXYWl2ZXJzIHJlZ2FyZGluZyBqb2Igb2ZmZXIgYW5kIGxhYm9yIGNlcnRpZmljYXRpb24gcmVxdWlyZW1lbnRzIGZvciBjZXJ0YWluIGFkdmFuY2VkIGRlZ3JlZSBwcm9mZXNzaW9uYWxzIGFuZCBpbmRpdmlkdWFscyBvZiBleGNlcHRpb25hbCBhYmlsaXR5LiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJUaGlzIGluY2x1ZGVzIHBlcnNvbnMgd2l0aCBhZHZhbmNlZCBkZWdyZWVzIGluIHNjaWVuY2UsIHRlY2hub2xvZ3ksIGVuZ2luZWVyaW5nLCBhbmQgbWF0aCAoU1RFTSkgZmllbGRzIGFuZCBlbnRyZXByZW5ldXJzLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2luZ2xlLWZlZWRiYWNrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwYWRkaW5nLWxlZnQiOiAiNDBweCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtYXJnaW4tYm90dG9tIjogIjBweCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0LWFsaWduIjogImp1c3RpZnkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dC1qdXN0aWZ5IjogImludGVyLXdvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDYiLCBbX3ZtLl92KCLirZDirZDirZDirZDirZAiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgW192bS5fdigiU1RFTSIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJwYWRkaW5nLWJvdHRvbSI6ICIxNXB4IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlNvZnR3YXJlIGVuZ2luZWVyIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiU29mdHdhcmUgZW5naW5lZXIgaW4gdGhlIHRlY2ggaW5kdXN0cnksIGl0IHRvb2sgb25seSAyIG1vbnRocyB0byByZWNlaXZlIGVhcmx5IHdvcmsgYXV0aG9yaXphdGlvbiBiZWZvcmUgYSBncmVlbiBjYXJkIHdhcyBhcHByb3ZlZCB3aGljaCBhbGxvd2VkIGZvciBlbXBsb3ltZW50IGNoYW5nZSB0byBhbm90aGVyIHRlY2ggY29tcGFueSBpbiBTYW4gRnJhbmNpc2NvLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2luZ2xlLWZlZWRiYWNrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwYWRkaW5nLWxlZnQiOiAiNDBweCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtYXJnaW4tYm90dG9tIjogIjBweCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0LWFsaWduIjogImp1c3RpZnkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dC1qdXN0aWZ5IjogImludGVyLXdvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDYiLCBbX3ZtLl92KCLirZDirZDirZDirZDirZAiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgW192bS5fdigiRW50cmVwcmVuZXVyIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgInBhZGRpbmctYm90dG9tIjogIjE1cHgiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJGb3VuZGVyIG9mIGluZnJhc3RydWN0dXJlIGFuZCBlY29zeXN0ZW0gYnVzaW5lc3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQW4gZW50cmVwcmVuZXVy4oCZcyBzcGVjaWZpYyBiYWNrZ3JvdW5kIGFuZCBjYXJlZXIgYXJlIGltcG9ydGFudCBmYWN0b3JzIGluIGRldGVybWluaW5nIHdoaWNoIHNlbGYtcGV0aXRpb24gbWV0aG9kIHdvdWxkIGJlIHRoZSBiZXN0IGZpdDogRXh0cmFvcmRpbmFyeSBBYmlsaXR5IG9yIE5hdGlvbmFsIEludGVyZXN0IFdhaXZlci4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkluIHRoaXMgY2FzZSB0aGUgYmlnZ2VzdCBzdXBwb3J0aW5nIGZhY3RvciB3YXMgdGhhdCBjb21wYW55IGhhcyBtYWRlIOKAlCBhbmQgd2lsbCBjb250aW51ZSB0byBtYWtlIOKAlCBodWdlIGNvbnRyaWJ1dGlvbnMgdG8gVVMgZW52aXJvbm1lbnQsIGFjY2VzcyB0byBjbGVhbiB3YXRlciwgYW5kIHJlYnVpbGRpbmcgYW5kIG1haW50YWluaW5nIHRoZSBpbmZyYXN0cnVjdHVyZS4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIml0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzaW5nbGUtZmVlZGJhY2siLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBhZGRpbmctbGVmdCI6ICI0MHB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiMHB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQtYWxpZ24iOiAianVzdGlmeSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0LWp1c3RpZnkiOiAiaW50ZXItd29yZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIFtfdm0uX3YoIuKtkOKtkOKtkOKtkOKtkCIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJGaW5hbmNlIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgInBhZGRpbmctYm90dG9tIjogIjE1cHgiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiSGVkZ2UgRnVuZCBNYW5hZ2VyIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiVGhlIHBldGl0aW9uIGhpZ2hsaWdodGVkIHRoZSB0cmFjayByZWNvcmQgb2YgY29uc2lzdGVudCBmaW5hbmNpYWwgc3VjY2VzcyBpbiBsZWFkaW5nIGFuZCBjcml0aWNhbCByb2xlcyBhdCBmb3ItcHJvZml0IGFuZCBub24tcHJvZml0IG9yZ2FuaXphdGlvbnMgYW5kIHRoZSBzdWJzZXF1ZW50IGJlbmVmaXRzIHRoYXQgdGhpcyBzdWNjZXNzIGJyb3VnaHQgdG8gdGhlIGxpdmVzIG9mIG90aGVyIEFtZXJpY2FucywgYXMgd2VsbCBhcyBtYWpvciBjb25jZXB0dWFsIGlubm92YXRpb25zIGluIGludmVzdG1lbnQgc3RyYXRlZ3kgYW5kIGNvbnRyaWJ1dGlvbnMgdG8gdGhlIGdsb2JhbCBlY29ub215IGFuZCBVLlMuIGpvYnMgbWFya2V0LiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQ3VyYXRlZCByb2J1c3QgdGVzdGltb25pYWwgc3VwcG9ydCBoaWdobGlnaHRpbmcgdGhlIGNsaWVudOKAmXMgdW5hbWJpZ3VvdXMgZXhwZXJ0aXNlIGFuZCBwcm9mZXNzaW9uYWwgY29udHJpYnV0aW9ucyBmcm9tIGZpZWxkLWxlYWRpbmcgZXhwZXJ0cyBhdCBwcmVtaWVyIHByb2Zlc3Npb25hbCBhbmQgYWNhZGVtaWMgaW5zdGl0dXRpb25zIGFjcm9zcyB0aGUgY291bnRyeSwgaW5jbHVkaW5nIGluZGl2aWR1YWxzIHdobyBoYWQgZGlzY3Vzc2VkIHRoZSBjbGllbnTigJlzIHdvcmsgaW4gdGhlaXIgb3duIHByb2Zlc3Npb25hbCBwcmVzZW50YXRpb25zIGFuZCBwdWJsaWNhdGlvbnMuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIml0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzaW5nbGUtZmVlZGJhY2siLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBhZGRpbmctbGVmdCI6ICI0MHB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiMHB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQtYWxpZ24iOiAianVzdGlmeSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0LWp1c3RpZnkiOiAiaW50ZXItd29yZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIFtfdm0uX3YoIuKtkOKtkOKtkOKtkOKtkCIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJTY2llbmNlcyIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJwYWRkaW5nLWJvdHRvbSI6ICIxNXB4IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNhbmNlciBCaW9tYXJrZXIgRGlzY292ZXJ5IFNjaWVudGlzdCIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjUgcHVibGljYXRpb25zOyBvdmVyIDIyMCBjaXRhdGlvbnM7IDYgY29uZmVyZW5jZSBwcmVzZW50YXRpb25zOyA2IGV4cGVydCBvcGluaW9uIGxldHRlcnM7IG11bHRpcGxlIHJlc2VhcmNoIGdyYW50cywgaW5jbHVkaW5nIGV2aWRlbmNlIG9mIGZ1bmRpbmcgYnkgTklILCBOYXRpb25hbCBDYW5jZXIgSW5zdGl0dXRlLCBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgb3JnYW5pemF0aW9ucy4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiU2V2ZXJhbCBob25vcnMgYW5kIGF3YXJkcywgYW4gYXJ0aWNsZSBhYm91dCB0aGUgc2NpZW50aXN04oCZcyByZXNlYXJjaCBhY2hpZXZlbWVudHM7IG1lbWJlcnNoaXBzIGluIHByb2Zlc3Npb25hbCBhc3NvY2lhdGlvbnM7IGludml0YXRpb25zIHRvIHB1Ymxpc2ggYXJ0aWNsZXMsIHRvIGpvaW4gbGFib3JhdG9yaWVzLCBhbmQgdG8gcHJlc2VudCBhdCBjb25mZXJlbmNlcy4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaXRlbSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNpbmdsZS1mZWVkYmFjayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicGFkZGluZy1sZWZ0IjogIjQwcHgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibWFyZ2luLWJvdHRvbSI6ICIwcHgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dC1hbGlnbiI6ICJqdXN0aWZ5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQtanVzdGlmeSI6ICJpbnRlci13b3JkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImg2IiwgW192bS5fdigi4q2Q4q2Q4q2Q4q2Q4q2QIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIkJ1c2luZXNzIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgInBhZGRpbmctYm90dG9tIjogIjE1cHgiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJJbnRlcm5hdGlvbmFsIEN1c3RvbWVyIGFuZCBQcm9kdWN0IFN1cHBvcnQgTWFuYWdlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJUaGUgcGV0aXRpb24gaGlnaGxpZ2h0ZWQgZXh0cmFvcmRpbmFyeSBnbG9iYWwgZXhwZXJpZW5jZSBhcyBhbiBJbnRlcm5hdGlvbmFsIEN1c3RvbWVyIGFuZCBQcm9kdWN0IFN1cHBvcnQgTWFuYWdlciwgaW5jbHVkaW5nIGludGVybmF0aW9uYWwgdHJhdmVscyB0byBwcm92aWRlIHVuaXF1ZSBhbmQgc3BlY2lhbGl6ZWQgaGFuZHMtb24gdHJhaW5pbmcgdG8gcHJvZmVzc2lvbmFscyBpbiB0aGUgdHJ1Y2tpbmcgaW5kdXN0cnkgYW5kIGRldmVsb3AgaW5ub3ZhdGl2ZSBzb2x1dGlvbnMgdG8gdGhlIGNvbW1lcmNpYWwgdHJ1Y2sgYWZ0ZXJtYXJrZXQuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkNsaWVudCB3b3JrIHN1cHBvcnRzIHRoZSBncm93dGggb2YgVVMgaW50ZXJuYXRpb25hbCBleHBvcnQgbWFya2V0LiBUaHJvdWdoIGRldGFpbGVkIHJlc2VhcmNoIGFuZCBwcmVwYXJhdGlvbiwgYW4gZXh0ZW5zaXZlIHBvcnRmb2xpbyBvdXRsaW5lZCBlbXBsb3ltZW50IGluIGEgY3JpdGljYWwgb3IgZXNzZW50aWFsIHJvbGUgZm9yIG9yZ2FuaXphdGlvbnMgd2l0aCBhIGRpc3Rpbmd1aXNoZWQgcmVwdXRhdGlvbiwgZXZpZGVuY2Ugb2Ygb3JpZ2luYWwgY29udHJpYnV0aW9ucyB0byB0aGUgY2xpZW50J3MgZmllbGQgb2YgZW1wbG95bWVudCwgYW5kIGV2aWRlbmNlIG9mIGp1ZGdpbmcgdGhlIHdvcmsgb2Ygb3RoZXJzLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2luZ2xlLWZlZWRiYWNrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwYWRkaW5nLWxlZnQiOiAiNDBweCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtYXJnaW4tYm90dG9tIjogIjBweCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0LWFsaWduIjogImp1c3RpZnkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dC1qdXN0aWZ5IjogImludGVyLXdvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDYiLCBbX3ZtLl92KCLirZDirZDirZDirZDirZAiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkFtYmFzc2Fkb3IgZm9yIHRoZSBub24tcHJvZml0IGF0aGxldGljIGZvdW5kYXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyAicGFkZGluZy1ib3R0b20iOiAiMTVweCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJFeGNlcHRpb25hbCBBYmlsaXRpZXMiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJObyBmb3JtYWwgZGVncmVlIOKAkyB0aGUgY2FzZSB3YXMgYmFzZWQgb24gRXhjZXB0aW9uYWwgQWJpbGl0aWVzLiBUaGUgYXBwbGljYW50IGhhcyB3b24gbWFueSBhd2FyZHMgYW5kIGdyYW50cywgaGFzIGFjdGl2ZWx5IGVuZ2FnZWQgaW4gZnVuZHJhaXNpbmcgZm9yIG5vbi1wcm9maXQgZm91bmRhdGlvbnMgaGVscGluZyBkaXNhYmxlZCBwZW9wbGUuICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJBbiBhd2FyZC13aW5uaW5nIGRvY3VtZW50YXJ5IHdhcyBtYWRlIGFib3V0IHRoZSBhcHBsaWNhbnQgd2hvIGhhcyBiZWVuIGludml0ZWQgdG8gbWFueSBzY2hvb2xzLCBjb3Jwb3JhdGUgZnVuY3Rpb25zLCBhbmQgY29tbXVuaXR5IGV2ZW50cyB0byBzcGVhayBhYm91dCBoaXMgd29yayBhbmQgdG8gaW5zcGlyZSBvdGhlcnMgaW50byBkb2luZyB0aGUgc2FtZS4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNsaWVudC10aHVtYm5haWxzIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoInNsaWNrIiwgewogICAgICAgICAgICAgICAgICAgIHJlZjogInNsaWNrMiIsCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzbGlkZXItbmF2IiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBvcHRpb25zOiBfdm0uc2xpY2tPcHRpb25zMiB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwcmV2LWFycm93IHNsaWNrLWFycm93IiB9LAogICAgICAgICAgICAgICAgW19jKCJmZWF0aGVyIiwgeyBhdHRyczogeyB0eXBlOiAiYXJyb3ctbGVmdCIgfSB9KV0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm5leHQtYXJyb3cgc2xpY2stYXJyb3ciIH0sCiAgICAgICAgICAgICAgICBbX2MoImZlYXRoZXIiLCB7IGF0dHJzOiB7IHR5cGU6ICJhcnJvdy1yaWdodCIgfSB9KV0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiUHJpY2VPZmZlciIsIHsgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi10b3AiOiAiMXJlbSIgfSB9KQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX20oMSksCiAgICAgIF92bS5fbSgyKSwKICAgICAgX3ZtLl9tKDMpCiAgICBdKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2VjdGlvbi10aXRsZSIgfSwgWwogICAgICBfYygiaDIiLCBbX3ZtLl92KCJTdWNjZXNzIFN0b3JpZXMiKV0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJhciIgfSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQmVsb3cgYXJlIHNvbWUgZXhhbXBsZXMgb2Ygb3VyIHVzZXJzJyBzdWNjZXNzZnVsIGNhc2VzIikKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgeyBzdGF0aWNDbGFzczogInNoYXBlMiByb3RhdGVtZSIsIHN0YXRpY1N0eWxlOiB7IGxlZnQ6ICI5MCUiIH0gfSwKICAgICAgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uL3Jlc291cmNlcy9zaGFwZTIuc3ZnIiksCiAgICAgICAgICAgIGFsdDogIkVCLTIgbml3IGZvciBmaW5hbmNlIGFuZCBiYW5raW5nIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzaGFwZTQiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9yZXNvdXJjZXMvc2hhcGU0LnN2ZyIpLAogICAgICAgICAgYWx0OiAiRUItMiBuaXcgZm9yIGVuZ2luZWVyIgogICAgICAgIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2hhcGU3IiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vcmVzb3VyY2VzL3NoYXBlNC5zdmciKSwKICAgICAgICAgIGFsdDogIkVCLTIgbml3IGZvciBwaWxvdCIKICAgICAgICB9CiAgICAgIH0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}