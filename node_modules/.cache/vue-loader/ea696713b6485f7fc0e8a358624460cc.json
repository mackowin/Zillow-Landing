{"remainingRequest":"/Users/nataliamackowiak/Documents/Startup/MVPs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/nataliamackowiak/Documents/Startup/MVPs/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nataliamackowiak/Documents/Startup/MVPs/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nataliamackowiak/Documents/Startup/MVPs/src/ideas/indiana/components/FooterIndiana.vue?vue&type=template&id=4297f332&","dependencies":[{"path":"/Users/nataliamackowiak/Documents/Startup/MVPs/src/ideas/indiana/components/FooterIndiana.vue","mtime":1671677424708},{"path":"/Users/nataliamackowiak/Documents/Startup/MVPs/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/MVPs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1611962713166},{"path":"/Users/nataliamackowiak/Documents/Startup/MVPs/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/MVPs/node_modules/vue-loader/lib/index.js","mtime":1611962713166}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}