{"remainingRequest":"/Users/nataliamackowiak/Documents/Startup/MVPs/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nataliamackowiak/Documents/Startup/MVPs/src/ideas/memes/UploadImageMemes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nataliamackowiak/Documents/Startup/MVPs/src/ideas/memes/UploadImageMemes.vue","mtime":1669831089708},{"path":"/Users/nataliamackowiak/Documents/Startup/MVPs/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/MVPs/node_modules/babel-loader/lib/index.js","mtime":1611962706532},{"path":"/Users/nataliamackowiak/Documents/Startup/MVPs/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/MVPs/node_modules/vue-loader/lib/index.js","mtime":1611962713166}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["UploadImageMemes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA","file":"UploadImageMemes.vue","sourceRoot":"src/ideas/memes","sourcesContent":["<template>\n  <div class=\"container\" style=\"padding-top: 4rem; padding-bottom: 4rem\">\n    <div id=\"meme\">\n\n      <canvas id=\"canvas\" v-bind:width=\"width\" v-bind:height=\"height\" style=\"margin-bottom: 1rem\"></canvas>\n\n      <!-- Image settings -->\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <div class=\"form-group\" style=\"margin-bottom: 2rem\">\n            <label for=\"image\" class=\"control-label\" style=\"margin-right: 10px\">\n                Upload custom image:\n            </label>\n            <input type=\"file\" id=\"image\" @change=\"onFileChange\">\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"width\" class=\"control-label\">\n                Image width\n            </label>\n            <input type=\"number\" id=\"width\" v-model=\"width\" class=\"form-control\">\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"height\" class=\"control-label\">\n                Image height\n            </label>\n            <input type=\"number\" id=\"height\" v-model=\"height\" class=\"form-control\">\n          </div>\n        </div>\n      </div>\n\n\n      <!-- Photo crop -->\n      <div class=\"row\" style=\"margin-top: 4rem;\">\n        <div class=\"col-12\">\n          <div class=\"container\" style=\"background-color: #eee; padding-top: 2rem\">\n            <div class=\"row justify-content-md-center\">\n              <div class=\"col-xs-12 col-md-6\">\n                <vue-croppie\n                    ref=\"croppieRef\"\n                    :enableOrientation=\"true\"\n                    @result=\"result\"\n                    :boundary=\"{height: 350, width: 350}\"\n                    :viewport=\"{ width:250, height:250, 'type':'circle' }\"\n                    @update=\"update\"\n                    :croppieInitialized=\"croppieInitialized\">\n                </vue-croppie>\n              </div>\n              <div class=\"col-xs-12 col-md-6\">\n                <img width=\"350\" :src=\"cropped\" alt=\"\" class=\"rounded mx-auto d-block img-thumbnail\" style=\"min-height: 350px;\">\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"row mt-5 mb-5\">\n            <div class=\"col-xs-12 col-md-12 text-left\">\n              <button class=\"btn btn-dark\" @click=\"bind()\" style=\"margin-right: 5px\">Bind</button>\n              <button class=\"btn btn-dark\" @click=\"rotate(+90)\" style=\"margin-right: 5px\">Rotate Left</button>\n              <button class=\"btn btn-dark\" @click=\"rotate(-90)\" style=\"margin-right: 5px\">Rotate Right</button>\n              <button class=\"btn btn-dark\" @click=\"crop()\">Crop</button>\n            </div>\n          </div>\n        \n        </div>\n      </div>\n\n        \n      <!-- Text settings -->\n      <div class=\"row\" style=\"margin-top: 4rem\">\n        <div class=\"col-sm-6\">\n          <div class=\"form-group\">\n            <label for=\"text\" class=\"control-label\">\n                Add text\n            </label>\n            <textarea id=\"text\" v-model=\"text\" class=\"form-control\" rows=\"8\" @keyup=\"onTextChange\" placeholder=\"Write your text\"></textarea>\n          </div>\n\n          <div class=\"row\">                  \n            <div class=\"form-group col-sm-3\">\n              <label for=\"textStrokeStyle\" class=\"control-label\" style=\"margin-right: 5px\">\n                  Stroke\n              </label>\n              <input type=\"color\" id=\"textStrokeStyle\" v-model=\"textStrokeStyle\" @change=\"onTextChange\">\n            </div>\n\n            <div class=\"form-group col-sm-3\">\n              <label for=\"textFillStyle\" class=\"control-label\" style=\"margin-right: 5px\">\n                  Fill\n              </label>\n              <input type=\"color\" id=\"textFillStyle\" v-model=\"textFillStyle\" @change=\"onTextChange\">\n            </div>\n          </div>\n        </div>\n      </div>\n    \n\n      <div class=\"row\" style=\"margin-top: 2rem; margin-bottom: 3rem\">\n        <a class=\"col-sm-3 btn btn-primary btn-register btn-profile\" download=\"Meme.png\" @click=\"download\" id=\"download\" href=\"#\" style=\"margin-right: 10px\">Download</a>\n        <button type=\"button\" class=\"btn btn-primary btn-assess\" @click=\"reset\">Reset</button>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\n\n// https://github.com/rozklad/vue-meme-generator\n\n  CanvasRenderingContext2D.prototype.wrapFillText = function (text, x, y, maxWidth, lineHeight) {\n\n      var lines = text.split(\"\\n\");\n    \n      for (var i = 0; i < lines.length; i++) {\n    \n        var words = lines[i].split(' ');\n        var line = '';\n    \n        for (var n = 0; n < words.length; n++) {\n          var testLine = line + words[n] + ' ';\n          var metrics = this.measureText(testLine);\n          var testWidth = metrics.width;\n          if (testWidth > maxWidth && n > 0) {\n            this.fillText(line, x, y);\n            line = words[n] + ' ';\n            y += lineHeight;\n          }\n          else {\n            line = testLine;\n          }\n        }\n    \n        this.fillText(line, x, y);\n        y += lineHeight;\n      }\n  };\n  \n  CanvasRenderingContext2D.prototype.wrapStrokeText = function (text, x, y, maxWidth, lineHeight) {\n  \n    var lines = text.split(\"\\n\");\n  \n    for (var i = 0; i < lines.length; i++) {\n  \n      var words = lines[i].split(' ');\n      var line = '';\n  \n      for (var n = 0; n < words.length; n++) {\n        var testLine = line + words[n] + ' ';\n        var metrics = this.measureText(testLine);\n        var testWidth = metrics.width;\n        if (testWidth > maxWidth && n > 0) {\n          this.strokeText(line, x, y);\n          line = words[n] + ' ';\n          y += lineHeight;\n        }\n        else {\n          line = testLine;\n        }\n      }\n  \n      this.strokeText(line, x, y);\n      y += lineHeight;\n    }\n  };\n\n  export default {\n    name: '#meme',\n    mounted () {\n      // Upon mounting of the component, we accessed the .bind({...})\n      // function to put an initial image on the canvas.\n      this.$refs.croppieRef.bind({\n        url: 'http://i.imgur.com/Fv2YOM6.jpg'\n      })\n      setTimeout(() => {\n        this.crop()\n      }, 1000)\n    },\n    data() {\n        return {\n            cropped: null,\n            images: [\n              'http://i.imgur.com/fHNtPXX.jpg',\n              'http://i.imgur.com/ecMUngU.jpg',\n              'http://i.imgur.com/7oO6zrh.jpg',\n              'http://i.imgur.com/miVkBH2.jpg',\n              'http://i.imgur.com/Fv2YOM6.jpg'\n            ],\n            canvasElementId: 'canvas',\n            width: 600,\n            height: 400,\n            image: '',\n            presets: [\n                '../resources/meme1.jpg',\n                'assets/meme2.jpg'\n            ],\n            text: '',\n            textMaxWidth: 250,\n            textStrokeStyle: '#000000',\n            textFillStyle: '#FFFFFF',\n            textLineWidth: 2,\n            textPosition: {\n                x: 20,\n                y: 60\n            },\n            textFont: '48px \"Impact\", sans-serif',\n            textLineHeight: 60\n        }\n    },\n    methods: {\n\n      bind() {\n        // Randomize cat photos, nothing special here.\n        let url = this.images[Math.floor(Math.random() * this.images.length)];\n        // Just like what we did with .bind({...}) on \n        // the mounted() function above.\n        this.$refs.croppieRef.bind({\n          url: url,\n        });\n      },\n\n      // CALLBACK USAGE\n      crop() {\n        // Here we are getting the result via callback function\n        // and set the result to this.cropped which is being \n        // used to display the result above.\n        let options = {\n          format: 'jpeg'\n        }\n        this.$refs.croppieRef.result(options, (output) => {\n          this.cropped = output;\n        });\n      },\n\n      // EVENT USAGE\n      cropViaEvent() {\n        this.$refs.croppieRef.result(this.options);\n      },\n\n      result(output) {\n        this.cropped = output;\n      },\n\n      update(val) {\n        console.log(val);\n      },\n\n      rotate(rotationAngle) {\n        // Rotates the image\n        this.$refs.croppieRef.rotate(rotationAngle);\n      },\n\n      croppieInitialized() {\n        // This method will be executed when the croppie is initialized\n        // You can use it to set the image\n        // this.$refs.croppieRef.bind({\n        //   url: 'http://i.imgur.com/Fv2YOM6.jpg',\n        // });\n        console.log('Croppie was initialized');\n      },\n  \n      onFileChange: function(event) {\n        var files = event.target.files || event.dataTransfer.files;\n  \n        if (!files.length)\n          return;\n  \n        this.createImage(files[0]);\n      },\n  \n      onTextChange: function() {\n        this.repaint();\n  \n      },\n  \n      createImage: function(file) {\n        var reader = new FileReader();\n        var vm = this;\n  \n        reader.onload = function(event) {\n          vm.image = event.target.result;\n          vm.repaint();\n        };\n  \n        reader.readAsDataURL(file);\n      },\n  \n      setImageToCanvas: function(url, callback) {\n  \n        var ctx = this.getContext();\n        var background = new Image();\n        background.src = url;\n        background.onload = function() {\n          ctx.drawImage(background, 0, 0);\n          if ( typeof callback == 'function' ) {\n            callback();\n          }\n        };\n      },\n  \n      setTextToCanvas: function(text) {\n  \n        var context = this.getContext();\n        context.font = this.textFont;\n        context.fillStyle = this.textFillStyle;\n        context.wrapFillText(text, this.textPosition.x, this.textPosition.y, this.textMaxWidth, this.textLineHeight);\n        context.strokeStyle = this.textStrokeStyle;\n        context.lineWidth = this.textLineWidth;\n        context.wrapStrokeText(text, this.textPosition.x, this.textPosition.y, this.textMaxWidth, this.textLineHeight);\n  \n      },\n  \n      getContext: function() {\n  \n        return document.getElementById(this.canvasElementId).getContext(\"2d\");\n  \n      },\n  \n      repaint: function() {\n  \n        var vm = this;\n  \n        if ( this.image == '' )\n          this.setTextToCanvas(this.text);\n  \n        this.setImageToCanvas(this.image, function(){\n          vm.setTextToCanvas(vm.text);\n        });\n  \n      },\n  \n      reset: function () {\n        this.image = '';\n        this.text = '';\n        this.width = 600;\n        this.height = 450;\n        this.textStrokeStyle = '#000000';\n        this.textFillStyle = '#FFFFFF';\n        this.repaint();\n        this.getContext().clearRect(0, 0, this.width, this.height);\n      },\n  \n      download: function() {\n        var dt = document.getElementById(this.canvasElementId).toDataURL('image/png');\n  \n        /* Change MIME type to trick the browser to download the file instead of displaying it */\n        dt = dt.replace(/^data:image\\/[^;]*/, 'data:application/octet-stream');\n  \n        /* In addition to <a>'s \"download\" attribute, you can define HTTP-style headers */\n        dt = dt.replace(/^data:application\\/octet-stream/, 'data:application/octet-stream;headers=Content-Disposition%3A%20attachment%3B%20filename=Meme.png');\n  \n        document.getElementById('download').href = dt;\n      },\n    }\n  }\n\n</script>"]}]}