{"remainingRequest":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/src/views/ideas/green-card/components/FeedbackGreenCard.vue?vue&type=template&id=884c1f66&","dependencies":[{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/src/views/ideas/green-card/components/FeedbackGreenCard.vue","mtime":1651859133157},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1611962713166},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/index.js","mtime":1611962713166}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjwhLS0gU3RhcnQgRmVlZGJhY2sgQXJlYSAtLT4KPHNlY3Rpb24gaWQ9InRlc3RpbW9uaWFscyIgY2xhc3M9ImZlZWRiYWNrLWFyZWEgcHRiLTgwIGJnLWY5ZmFmYiI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24tdGl0bGUiPgogICAgICAgICAgICA8aDI+U3VjY2VzcyBTdG9yaWVzPC9oMj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFyIj48L2Rpdj4KICAgICAgICAgICAgPHA+QmVsb3cgYXJlIHNvbWUgZXhhbXBsZXMgb2Ygb3VyIHN1Y2Nlc3NmdWwgY2FzZXM8L3A+CiAgICAgICAgPC9kaXY+CgoKICAgICAgICA8ZGl2IGNsYXNzPSJmZWVkYmFjay1zbGlkZXMiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbGllbnQtZmVlZGJhY2siPgogICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8c2xpY2sKICAgICAgICAgICAgICAgICAgICAgICAgcmVmPSJzbGljayIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNsaWRlci1mb3IiCiAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPSJzbGlja09wdGlvbnMiCiAgICAgICAgICAgICAgICAgICAgPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2luZ2xlLWZlZWRiYWNrIiBzdHlsZT0icGFkZGluZy1sZWZ0OiA0MHB4OyBtYXJnaW4tYm90dG9tOiAwcHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNj7irZDirZDirZDirZDirZA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5TVEVNPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0icGFkZGluZy1ib3R0b206IDE1cHgiPlByb2R1Y3QgTWFuYWdlciBpbiBCaWcgVGVjaDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5JbiAyMDIyLCBVLlMuIENpdGl6ZW5zaGlwIGFuZCBJbW1pZ3JhdGlvbiBTZXJ2aWNlcyBhbm5vdW5jZWQgdXBkYXRlZCBndWlkYW5jZSBvbiBhZGp1ZGljYXRpbmcgcmVxdWVzdHMgZm9yIE5hdGlvbmFsIEludGVyZXN0IFdhaXZlcnMgcmVnYXJkaW5nIGpvYiBvZmZlciBhbmQgbGFib3IgY2VydGlmaWNhdGlvbiByZXF1aXJlbWVudHMgZm9yIGNlcnRhaW4gYWR2YW5jZWQgZGVncmVlIHByb2Zlc3Npb25hbHMgYW5kIGluZGl2aWR1YWxzIG9mIGV4Y2VwdGlvbmFsIGFiaWxpdHkuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlRoaXMgaW5jbHVkZXMgcGVyc29ucyB3aXRoIGFkdmFuY2VkIGRlZ3JlZXMgaW4gc2NpZW5jZSwgdGVjaG5vbG9neSwgZW5naW5lZXJpbmcsIGFuZCBtYXRoIChTVEVNKSBmaWVsZHMgYW5kIGVudHJlcHJlbmV1cnMuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaW5nbGUtZmVlZGJhY2siIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDQwcHg7IG1hcmdpbi1ib3R0b206IDBweCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2PuKtkOKtkOKtkOKtkOKtkDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlNURU08L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJwYWRkaW5nLWJvdHRvbTogMTVweCI+U29mdHdhcmUgZW5naW5lZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+U29mdHdhcmUgZW5naW5lZXIgaW4gdGVjaCBpbmR1c3RyeSwgaXQgdG9vayBvbmx5IDIgbW9udGhzIHRvIHJlY2VpdmUgZWFybHkgd29yayBhdXRob3JpemF0aW9uIGJlZm9yZSBncmVlbiBjYXJkIHdhcyBhcHByb3ZlZCB3aGljaCBhbGxvd2VkIGZvciBlbXBsb3ltZW50IGNoYW5nZSB0byBhbm90aGVyIHRlY2ggY29tcGFueSBpbiBTYW4gRnJhbmNpc2NvLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2luZ2xlLWZlZWRiYWNrIiBzdHlsZT0icGFkZGluZy1sZWZ0OiA0MHB4OyBtYXJnaW4tYm90dG9tOiAwcHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNj7irZDirZDirZDirZDirZA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5FbnRyZXByZW5ldXI8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJwYWRkaW5nLWJvdHRvbTogMTVweCI+Rm91bmRlciBvZiBpbmZyYXN0cnVjdHVyZSBhbmQgZWNvc3lzdGVtIGJ1c2luZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkFuIGVudHJlcHJlbmV1cuKAmXMgc3BlY2lmaWMgYmFja2dyb3VuZCBhbmQgY2FyZWVyIGFyZSBpbXBvcnRhbnQgZmFjdG9ycyBpbiBkZXRlcm1pbmluZyB3aGljaCBzZWxmLXBldGl0aW9uIG1ldGhvZCB3b3VsZCBiZSB0aGUgYmVzdCBmaXQ6IEV4dHJhb3JkaW5hcnkgQWJpbGl0eSBvciBOYXRpb25hbCBJbnRlcmVzdCBXYWl2ZXIuIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5JbiB0aGlzIGNhc2UgdGhlIGJpZ2dlc3Qgc3VwcG9ydGluZyBmYWN0b3Igd2FzIHRoYXQgY29tcGFueSBoYXMgbWFkZSDigJQgYW5kIHdpbGwgY29udGludWUgdG8gbWFrZSDigJQgaHVnZSBjb250cmlidXRpb25zIHRvIFVTIGVudmlyb25tZW50LCBhY2Nlc3MgdG8gY2xlYW4gd2F0ZXIsIGFuZCByZWJ1aWxkaW5nIGFuZCBtYWludGFpbmluZyB0aGUgaW5mcmFzdHJ1Y3R1cmUuIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2luZ2xlLWZlZWRiYWNrIiBzdHlsZT0icGFkZGluZy1sZWZ0OiA0MHB4OyBtYXJnaW4tYm90dG9tOiAwcHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNj7irZDirZDirZDirZDirZA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5GaW5hbmNlPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0icGFkZGluZy1ib3R0b206IDE1cHgiPkhlZGdlIEZ1bmQgTWFuYWdlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QZXRpdGlvbiBoaWdobGlnaHRlZCB0aGUgdHJhY2stcmVjb3JkIG9mIGNvbnNpc3RlbnQgZmluYW5jaWFsIHN1Y2Nlc3MgaW4gbGVhZGluZyBhbmQgY3JpdGljYWwgcm9sZXMgYXQgZm9yLXByb2ZpdCBhbmQgbm9uLXByb2ZpdCBvcmdhbml6YXRpb25zIGFuZCB0aGUgc3Vic2VxdWVudCBiZW5lZml0cyB0aGF0IHRoaXMgc3VjY2VzcyBicm91Z2h0IHRvIHRoZSBsaXZlcyBvZiBvdGhlciBBbWVyaWNhbnMsIGFzIHdlbGwgYXMgbWFqb3IgY29uY2VwdHVhbCBpbm5vdmF0aW9ucyBpbiBpbnZlc3RtZW50IHN0cmF0ZWd5IGFuZCBjb250cmlidXRpb25zIHRvIHRoZSBnbG9iYWwgZWNvbm9teSBhbmQgVS5TLiBqb2JzIG1hcmtldC4gPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkN1cmF0ZWQgcm9idXN0IHRlc3RpbW9uaWFsIHN1cHBvcnQgaGlnaGxpZ2h0aW5nIHRoZSBjbGllbnTigJlzIHVuYW1iaWd1b3VzIGV4cGVydGlzZSBhbmQgcHJvZmVzc2lvbmFsIGNvbnRyaWJ1dGlvbnMgZnJvbSBmaWVsZC1sZWFkaW5nIGV4cGVydHMgYXQgcHJlbWllciBwcm9mZXNzaW9uYWwgYW5kIGFjYWRlbWljIGluc3RpdHV0aW9ucyBhY3Jvc3MgdGhlIGNvdW50cnksIGluY2x1ZGluZyBpbmRpdmlkdWFscyB3aG8gaGFkIGRpc2N1c3NlZCB0aGUgY2xpZW504oCZcyB3b3JrIGluIHRoZWlyIG93biBwcm9mZXNzaW9uYWwgcHJlc2VudGF0aW9ucyBhbmQgcHVibGljYXRpb25zLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2luZ2xlLWZlZWRiYWNrIiBzdHlsZT0icGFkZGluZy1sZWZ0OiA0MHB4OyBtYXJnaW4tYm90dG9tOiAwcHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNj7irZDirZDirZDirZDirZA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5TY2llbmNlczwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9InBhZGRpbmctYm90dG9tOiAxNXB4Ij5DYW5jZXIgQmlvbWFya2VyIERpc2NvdmVyeSBTY2llbnRpc3Q8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+NSBwdWJsaWNhdGlvbnM7IG92ZXIgMjIwIGNpdGF0aW9uczsgNiBjb25mZXJlbmNlIHByZXNlbnRhdGlvbnM7IDYgZXhwZXJ0IG9waW5pb24gbGV0dGVyczsgbXVsdGlwbGUgcmVzZWFyY2ggZ3JhbnRzLCBpbmNsdWRpbmcgZXZpZGVuY2Ugb2YgZnVuZGluZyBieSBOSUgsIE5hdGlvbmFsIENhbmNlciBJbnN0aXR1dGUgYW5kIGEgbnVtYmVyIG9mIG90aGVyIG9yZ2FuaXphdGlvbnMuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNldmVyYWwgaG9ub3JzIGFuZCBhd2FyZHMsIGFuIGFydGljbGUgYWJvdXQgdGhlIHNjaWVudGlzdOKAmXMgcmVzZWFyY2ggYWNoaWV2ZW1lbnRzOyBtZW1iZXJzaGlwcyBpbiBwcm9mZXNzaW9uYWwgYXNzb2NpYXRpb25zOyBpbnZpdGF0aW9ucyB0byBwdWJsaXNoIGFydGljbGVzLCB0byBqb2luIGxhYm9yYXRvcmllcywgYW5kIHRvIHByZXNlbnQgYXQgY29uZmVyZW5jZXMuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaW5nbGUtZmVlZGJhY2siIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDQwcHg7IG1hcmdpbi1ib3R0b206IDBweCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2PuKtkOKtkOKtkOKtkOKtkDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkJ1c2luZXNzPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0icGFkZGluZy1ib3R0b206IDE1cHgiPkludGVybmF0aW9uYWwgQ3VzdG9tZXIgYW5kIFByb2R1Y3QgU3VwcG9ydCBNYW5hZ2VyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlBldGl0aW9uIGhpZ2hsaWdodGVkIGV4dHJhb3JkaW5hcnkgZ2xvYmFsIGV4cGVyaWVuY2UgYXMgYW4gSW50ZXJuYXRpb25hbCBDdXN0b21lciBhbmQgUHJvZHVjdCBTdXBwb3J0IE1hbmFnZXIsIGluY2x1ZGluZyBpbnRlcm5hdGlvbmFsIHRyYXZlbHMgdG8gcHJvdmlkZSB1bmlxdWUgYW5kIHNwZWNpYWxpemVkIGhhbmRzLW9uIHRyYWluaW5nIHRvIHByb2Zlc3Npb25hbHMgaW4gdGhlIHRydWNraW5nIGluZHVzdHJ5IGFuZCBkZXZlbG9waW5nIGlubm92YXRpdmUgc29sdXRpb25zIHRvIHRoZSBjb21tZXJjaWFsIHRydWNrIGFmdGVybWFya2V0LjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5DbGllbnQgd29yayBzdXBwb3J0cyB0aGUgZ3Jvd3RoIG9mIFVTIGludGVybmF0aW9uYWwgZXhwb3J0IG1hcmtldC4gVGhyb3VnaCBkZXRhaWxlZCByZXNlYXJjaCBhbmQgcHJlcGFyYXRpb24sIGFuIGV4dGVuc2l2ZSBwb3J0Zm9saW8gb3V0bGluZWQgZW1wbG95bWVudCBpbiBhIGNyaXRpY2FsIG9yIGVzc2VudGlhbCByb2xlIGZvciBvcmdhbml6YXRpb25zIHdpdGggYSBkaXN0aW5ndWlzaGVkIHJlcHV0YXRpb24sIGV2aWRlbmNlIG9mIG9yaWdpbmFsIGNvbnRyaWJ1dGlvbnMgdG8gY2xpZW50J3MgZmllbGQgb2YgZW1wbG95bWVudCwgYW5kIGV2aWRlbmNlIG9mIGp1ZGdpbmcgdGhlIHdvcmsgb2Ygb3RoZXJzLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2luZ2xlLWZlZWRiYWNrIiBzdHlsZT0icGFkZGluZy1sZWZ0OiA0MHB4OyBtYXJnaW4tYm90dG9tOiAwcHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNj7irZDirZDirZDirZDirZA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5BbWJhc3NhZG9yIGZvciB0aGUgbm9uLXByb2ZpdCBhdGhsZXRpYyBmb3VuZGF0aW9uPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0icGFkZGluZy1ib3R0b206IDE1cHgiPkV4Y2VwdGlvbmFsIEFiaWxpdGllczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyBmb3JtYWwgZGVncmVlIOKAkyB0aGUgY2FzZSB3YXMgYmFzZWQgb24gRXhjZXB0aW9uYWwgQWJpbGl0aWVzLiBUaGUgYXBwbGljYW50IGhhcyB3b24gbWFueSBhd2FyZHMgYW5kIGdyYW50cywgaGFzIGFjdGl2ZWx5IGVuZ2FnZWQgaW4gZnVuZHJhaXNpbmcgZm9yIG5vbi1wcm9maXQgZm91bmRhdGlvbnMgaGVscGluZyBkaXNhYmxlZCBwZW9wbGUuIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5BbiBhd2FyZC13aW5uaW5nIGRvY3VtZW50YXJ5IHdhcyBtYWRlIGFib3V0IHRoZSBhcHBsaWNhbnQgd2hvIGhhcyBiZWVuIGludml0ZWQgdG8gbWFueSBzY2hvb2xzLCBjb3Jwb3JhdGUgZnVuY3Rpb25zLCBhbmQgY29tbXVuaXR5IGV2ZW50cyB0byBzcGVhayBhYm91dCBoaXMgd29yayBhbmQgdG8gaW5zcGlyZSBvdGhlcnMgaW50byBkb2luZyB0aGUgc2FtZS48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDwvc2xpY2s+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbGllbnQtdGh1bWJuYWlscyI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxzbGljawogICAgICAgICAgICAgICAgICAgICAgICByZWYgPSAic2xpY2syIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2xpZGVyLW5hdiIKICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9InNsaWNrT3B0aW9uczIiCiAgICAgICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICA8L3NsaWNrPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHJldi1hcnJvdyBzbGljay1hcnJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGZlYXRoZXIgdHlwZT0iYXJyb3ctbGVmdCI+PC9mZWF0aGVyPgogICAgICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibmV4dC1hcnJvdyBzbGljay1hcnJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGZlYXRoZXIgdHlwZT0iYXJyb3ctcmlnaHQiPjwvZmVhdGhlcj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InNoYXBlMiByb3RhdGVtZSI+PGltZyBzcmM9Ii4uL3Jlc291cmNlcy9zaGFwZTIuc3ZnIiBhbHQ9InNoYXBlIj48L2Rpdj4KICAgIDxkaXYgY2xhc3M9InNoYXBlNCI+PGltZyBzcmM9Ii4uL3Jlc291cmNlcy9zaGFwZTQuc3ZnIiBhbHQ9InNoYXBlIj48L2Rpdj4KICAgIDxkaXYgY2xhc3M9InNoYXBlNyI+PGltZyBzcmM9Ii4uL3Jlc291cmNlcy9zaGFwZTQuc3ZnIiBhbHQ9InNoYXBlIj48L2Rpdj4KPC9zZWN0aW9uPgo8IS0tIEVuZCBGZWVkYmFjayBBcmVhIC0tPgo="},null]}