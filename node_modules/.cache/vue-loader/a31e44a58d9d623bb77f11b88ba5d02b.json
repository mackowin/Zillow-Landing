{"remainingRequest":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/src/views/ideas/properties/Dashboard.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/src/views/ideas/properties/Dashboard.vue","mtime":1662775228511},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/css-loader/dist/cjs.js","mtime":1611962712985},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1611962713166},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/postcss-loader/src/index.js","mtime":1611962713146},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/index.js","mtime":1611962713166}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmEuYnV0dG9uLWRlbW8gewogICAgY29sb3I6ICNmZmYgIWltcG9ydGFudDsKICAgIGJhY2tncm91bmQtY29sb3I6ICM1NDU3YzE7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICBsaW5lLWhlaWdodDogMTsKICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7CiAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjNTQ1N2MxOwogICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOwogICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIG91dGxpbmU6IG5vbmU7CiAgICBtYXJnaW46IDA7CiAgICB0cmFuc2l0aW9uOiAwLjFzOwogICAgZm9udC13ZWlnaHQ6IDUwMDsKICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOwogICAgLW1zLXVzZXItc2VsZWN0OiBub25lOwogICAgcGFkZGluZzogMTBweCAyMHB4ICFpbXBvcnRhbnQ7CiAgICBmb250LXNpemU6IDE0cHg7CiAgICBib3JkZXItcmFkaXVzOiAzcHg7Cn07CgphLmJ1dHRvbi1kZW1vOmhvdmVyIHsKICAgIGJhY2tncm91bmQ6ICNjNjc5ZTM7CiAgICBib3JkZXItY29sb3I6ICNjNjc5ZTM7CiAgICBjb2xvcjogI2ZmZjsKfQoKYS5idXR0b24tZGVtbzphY3RpdmUgewogICAgYmFja2dyb3VuZDogI2M2NzllMzsKICAgIGJvcmRlci1jb2xvcjogI2M2NzllMzsKICAgIGNvbG9yOiAjZmZmOwp9CgphLnBvc3Rjb2RlLXR5cGUgewogICAgY29sb3I6ICM1NDU3YzE7IAogICAgZm9udC13ZWlnaHQ6IDUwMDsKfQoKYS5wb3N0Y29kZS10eXBlOmhvdmVyIHsKICAgIGNvbG9yOiAjNTQ1N2MxOwogICAgdGV4dC1kZWNvcmF0aW9uOiByZ2JhKDg0LDg3LDE5MywgMC40KSB1bmRlcmxpbmU7CiAgICB0cmFuc2l0aW9uOiBub25lOwp9CgouYWRkcmVzcyB7CiAgY29sb3I6ICNhM2EyYTI7IAogIGZvbnQtc2l6ZTogMTFweDsKfQoKLnByb3BlcnR5LWltZyB7CiAgIGhlaWdodDogNDBweDsgCiAgIGJvcmRlci1yYWRpdXM6IDE1JTsKfQoKCi8qIFBvcHVwIGNvbnRhaW5lciAtIGNhbiBiZSBhbnl0aGluZyB5b3Ugd2FudCAqLwoucG9wdXAgewogIGN1cnNvcjogcG9pbnRlcjsKfQoKLyogVGhlIGFjdHVhbCBwb3B1cCAqLwoucG9wdXB0ZXh0IHsKICBmb250LWZhbWlseTogUG9wcGluczsKICBmb250LXNpemU6IDE2cHg7CiAgYmFja2dyb3VuZC1jb2xvcjogI0Y1RjdGQTsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgYm9yZGVyOiB0aGljayBkb3VibGUgIzU0NTdjMTsKICBib3JkZXItcmFkaXVzOiAxMHB4OwogIHBhZGRpbmc6IDEwcHggMjBweCAzMHB4OwogIHBvc2l0aW9uOiBmaXhlZDsKICB3aWR0aDogNjAwcHg7CiAgaGVpZ2h0OiAzNjBweDsKICB0b3A6IDMwJTsKICBsZWZ0OiA1MCU7CiAgbWFyZ2luLXRvcDogLTE4MHB4OyAvKiBOZWdhdGl2ZSBoYWxmIG9mIGhlaWdodC4gKi8KICBtYXJnaW4tbGVmdDogLTMwMHB4OyAvKiBOZWdhdGl2ZSBoYWxmIG9mIHdpZHRoLiAqLwogIHotaW5kZXg6IDE7Cn0KCi5wb3B1cHRleHQgcCB7CiAgICBjb2xvcjogIzBlMzE0YzsKfQoKLmJ0bi1wcmltYXJ5LmJ0bi1wcm9wZXJ0eSB7CiAgbWFyZ2luLXRvcDogM3JlbTsgCiAgYmFja2dyb3VuZC1jb2xvcjogI2M2NzllMzsKICBib3gtc2hhZG93OiAwIDEzcHggMjdweCAwIHJnYmEoMTk4LCAxMjEsIDIyNywgMC4yNSk7Cn0KCg=="},{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Dashboard.vue","sourceRoot":"src/views/ideas/properties","sourcesContent":["<template>\n    <ve-table \n      style=\"width:100%\" \n      :columns=\"columns\" \n      :table-data=\"tableData\"\n      row-key-field-name=\"rowKey\"\n    />\n</template>\n\n\n\n<script>\n\nimport img1 from './resources/photo13.jpeg';\nimport img2 from './resources/photo14.jpeg';\nimport img3 from './resources/photo15.jpeg';\nimport img4 from './resources/photo16.jpeg';\nimport img5 from './resources/banner-photo11.jpeg';\n\n\nexport default {\n  data() {\n    return {\n      icon: \"fa-regular fa-heart fa-2xl\",\n      isVisible: \"visibility: hidden\",\n      columns: [\n        {\n          field: \"\",\n          key: \"a\",\n          title: \"\",\n          align: \"center\",\n          renderBodyCell: () => {\n            return (\n                <span>\n                <div class=\"popup\" on-click={() => this.saveProperty()}>\n                    <i class={this.icon} style=\"color: #5457c1\">\n                        <div style={this.isVisible} class=\"popuptext\">\n                            <p on-click={() => this.closePopup()} style=\"font-weight: 600; margin: 0px; text-align: right\">X</p>\n                            <p style=\"font-weight: 600;\">Disabled for BASIC PLAN</p>\n                            <p style=\"font-weight: 600; margin-bottom: 0px;\">Want to upgrade to PRO PLAN (£69)?</p>\n                            <p style=\"font-weight: 600;\">Contact us below</p>\n                            <p style=\"font-weight: 400;\">Find all features included in PRO PLAN pricing on</p>\n                            <a href=\"/pricing\" style=\"text-decoration: underline\">www.doorhacker.com</a>\n\n                            <div class=\"row\">\n                              <a href = \"/contact\" class=\"btn btn-primary btn-property col-6 offset-3\" target=\"_blank\">Contact us</a>\n                            </div>\n                        </div>\n                    </i>\n                </div>\n                </span>\n            );\n          },\n        },\n        {\n          field: \"image\",\n          key: \"b\",\n          title: \"\",\n          align: \"center\",\n          renderBodyCell: ({ row, column }) => {\n            const img = row[column.field]\n            return (\n                <span>\n                    <img src={img} class=\"property-img\" />\n                </span>\n            );\n          },\n        },\n        {\n          fieldOne: \"postcode\",\n          fieldTwo: \"type\",\n          fieldThree: \"address\",\n          subField: \"source\",\n          key: \"c\",\n          title: \"Property\",\n          align: \"left\",\n          renderBodyCell: ({ row, column }) => {\n            const textPostcode = row[column.fieldOne];\n            const textType = row[column.fieldTwo];\n            const textAddress = row[column.fieldThree];\n            const link = row[column.subField];\n            return (\n                <span>\n                    <a href={link} target=\"_blank\" class=\"postcode-type\">\n                            {textPostcode}: {textType}\n                        <div class=\"address\">\n                            {textAddress}\n                        </div>\n                    </a>\n                </span>\n            );\n          },\n        },\n        {\n          field: \"price\",\n          key: \"d\",\n          title: \"Price (£)\",\n          align: \"right\",\n          renderBodyCell: ({ row, column }) => {\n            const text = row[column.field];\n            const number = parseInt(text, 10).toLocaleString();\n            return (\n                <span>\n                    {number}\n                </span>\n            );\n          },\n        },\n        {\n          field: \"rent\",\n          key: \"e\",\n          title: \"Rent estimate (£)\",\n          align: \"right\",\n          renderBodyCell: ({ row, column }) => {\n            const text = row[column.field];\n            const number = parseInt(text, 10).toLocaleString();\n            return (\n                <span>\n                    {number}\n                </span>\n            );\n          },\n        },\n        {\n          subFieldOne: \"rent\",\n          subFieldTwo: \"price\",\n          key: \"f\",\n          title: \"Rent/Price\",\n          align: \"right\",\n          renderBodyCell: ({ row, column }) => {\n            const rentInput = row[column.subFieldOne];\n            const priceInput = row[column.subFieldTwo];\n            const rentNumber = parseInt(rentInput, 10);\n            const priceNumber = parseInt(priceInput, 10);\n            const ratio = (rentNumber / priceNumber * 100).toFixed(1)\n            \n            return (\n                <span>\n                    {ratio}%\n                </span>\n            );\n          },\n        },\n        {\n          subFieldOne: \"rent\",\n          subFieldTwo: \"price\",\n          key: \"g\",\n          title: \"Gross yield\",\n          align: \"right\",\n          renderBodyCell: ({ row, column }) => {\n            const rentInput = row[column.subFieldOne];\n            const priceInput = row[column.subFieldTwo];\n            const rentNumber = parseInt(rentInput, 10);\n            const priceNumber = parseInt(priceInput, 10);\n            const ratio = (rentNumber / priceNumber * 100 * 12).toFixed(0)\n            return (\n                <span>\n                    {ratio}%\n                </span>\n            );\n          },\n        },\n        {\n          subFieldOne: \"rent\",\n          subFieldTwo: \"sqft\",\n          key: \"h\",\n          title: \"Rent / sqft\",\n          width: \"\",\n          align: \"right\",\n          renderBodyCell: ({ row, column }) => {\n              const rentInput = row[column.subFieldOne];\n              const sqftInput = row[column.subFieldTwo];\n              const rentNumber = parseInt(rentInput, 10);\n              const sqftNumber = parseInt(sqftInput, 10);\n              const ratio = (rentNumber / sqftNumber).toFixed(1)\n              return (\n                  <span>\n                      {ratio}\n                  </span>\n              );\n            },\n        },\n        {\n          field: \"beds\",\n          key: \"i\",\n          title: \"Beds\",\n          align: \"right\",\n          renderBodyCell: ({ row, column }) => {\n            const text = row[column.field];\n            return (\n                <span>\n                    {text}\n                </span>\n            );\n          },\n        },\n        {\n          field: \"baths\",\n          key: \"j\",\n          title: \"Baths\",\n          align: \"right\",\n          renderBodyCell: ({ row, column }) => {\n            const text = row[column.field];\n            return (\n                <span>\n                    {text}\n                </span>\n            );\n          },\n        },\n        {\n          field: \"sqft\",\n          key: \"k\",\n          title: \"Sq ft\",\n          align: \"right\",\n          renderBodyCell: ({ row, column }) => {\n            const text = row[column.field];\n            const number = parseInt(text, 10).toLocaleString();\n            return (\n                <span>\n                    {number}\n                </span>\n            );\n          },\n        },\n        {\n          field: \"source\",\n          key: \"l\",\n          title: \"Listing\",\n          width: \"\",\n          center: \"left\",\n          renderBodyCell: ({ row, column }) => {\n            const link = row[column.field];\n            return (\n                <span>\n                    <a href={link} target=\"_blank\" class=\"button-demo\">\n                        See details\n                    </a>\n                </span>\n            );\n          },\n        },\n      ],\n      tableData: [\n        {\n          image: img1,\n          postcode: \"E11\",\n          type: \"1 bed flat\",\n          address: \"1 Glengall Grove, London\",\n          price: \"100000\",\n          rent: \"1500\",\n          beds: \"1\",\n          baths: \"2\",\n          sqft: \"1111\",\n          source: \"http://www.wikipedia.com\",\n        },\n        {\n          image: img2,\n          postcode: \"E12\",\n          type: \"2 bed flat\",\n          address: \"2 Glengall Grove, London\",\n          price: \"200000\",\n          rent: \"2500\",\n          beds: \"2\",\n          baths: \"3\",\n          sqft: \"2222\",\n          source: \"http://www.onet.pl\",\n        },\n        {\n          image: img3,\n          postcode: \"E13\",\n          type: \"3 bed flat\",\n          address: \"3 Glengall Grove, London\",\n          price: \"300000\",\n          rent: \"3500\",\n          beds: \"3\",\n          baths: \"4\",\n          sqft: \"3333\",\n          source: \"http://www.codecademy.com\",\n        },\n        {\n          image: img4,\n          postcode: \"E14\",\n          type: \"4 bed flat\",\n          address: \"4 Glengall Grove, London\",\n          price: \"400000\",\n          rent: \"4500\",\n          beds: \"4\",\n          baths: \"5\",\n          sqft: \"4444\",\n          source: \"http://www.github.com\",\n        },\n        {\n          image: img5,\n          postcode: \"E15\",\n          type: \"5 bed flat\",\n          address: \"5 Glengall Grove, London\",\n          price: \"500000\",\n          rent: \"5500\",\n          beds: \"5\",\n          baths: \"6\",\n          sqft: \"5555\",\n          source: \"http://www.wikipedia.com\",\n        },\n        {\n          image: img1,\n          postcode: \"E11\",\n          type: \"1 bed flat\",\n          address: \"1 Glengall Grove, London\",\n          price: \"100000\",\n          rent: \"1500\",\n          beds: \"1\",\n          baths: \"2\",\n          sqft: \"1111\",\n          source: \"http://www.wikipedia.com\",\n        },\n        {\n          image: img2,\n          postcode: \"E12\",\n          type: \"2 bed flat\",\n          address: \"2 Glengall Grove, London\",\n          price: \"200000\",\n          rent: \"2500\",\n          beds: \"2\",\n          baths: \"3\",\n          sqft: \"2222\",\n          source: \"http://www.onet.pl\",\n        },\n        {\n          image: img3,\n          postcode: \"E13\",\n          type: \"3 bed flat\",\n          address: \"3 Glengall Grove, London\",\n          price: \"300000\",\n          rent: \"3500\",\n          beds: \"3\",\n          baths: \"4\",\n          sqft: \"3333\",\n          source: \"http://www.codecademy.com\",\n        },\n        {\n          image: img4,\n          postcode: \"E14\",\n          type: \"4 bed flat\",\n          address: \"4 Glengall Grove, London\",\n          price: \"400000\",\n          rent: \"4500\",\n          beds: \"4\",\n          baths: \"5\",\n          sqft: \"4444\",\n          source: \"http://www.github.com\",\n        },\n        {\n          image: img5,\n          postcode: \"E15\",\n          type: \"5 bed flat\",\n          address: \"5 Glengall Grove, London\",\n          price: \"500000\",\n          rent: \"5500\",\n          beds: \"5\",\n          baths: \"6\",\n          sqft: \"5555\",\n          source: \"http://www.wikipedia.com\",\n        },\n        {\n          image: img1,\n          postcode: \"E11\",\n          type: \"1 bed flat\",\n          address: \"1 Glengall Grove, London\",\n          price: \"100000\",\n          rent: \"1500\",\n          beds: \"1\",\n          baths: \"2\",\n          sqft: \"1111\",\n          source: \"http://www.wikipedia.com\",\n        },\n        {\n          image: img2,\n          postcode: \"E12\",\n          type: \"2 bed flat\",\n          address: \"2 Glengall Grove, London\",\n          price: \"200000\",\n          rent: \"2500\",\n          beds: \"2\",\n          baths: \"3\",\n          sqft: \"2222\",\n          source: \"http://www.onet.pl\",\n        },\n        {\n          image: img3,\n          postcode: \"E13\",\n          type: \"3 bed flat\",\n          address: \"3 Glengall Grove, London\",\n          price: \"300000\",\n          rent: \"3500\",\n          beds: \"3\",\n          baths: \"4\",\n          sqft: \"3333\",\n          source: \"http://www.codecademy.com\",\n        },\n        {\n          image: img4,\n          postcode: \"E14\",\n          type: \"4 bed flat\",\n          address: \"4 Glengall Grove, London\",\n          price: \"400000\",\n          rent: \"4500\",\n          beds: \"4\",\n          baths: \"5\",\n          sqft: \"4444\",\n          source: \"http://www.github.com\",\n        },\n        {\n          image: img5,\n          postcode: \"E15\",\n          type: \"5 bed flat\",\n          address: \"5 Glengall Grove, London\",\n          price: \"500000\",\n          rent: \"5500\",\n          beds: \"5\",\n          baths: \"6\",\n          sqft: \"5555\",\n          source: \"http://www.wikipedia.com\",\n        },\n      ],\n    };\n  },\n  methods: {\n      saveProperty() {\n          this.icon = \"fa-solid fa-heart fa-2xl\";\n          setTimeout(() => {this.cancelSaveProperty()}, 80);\n          setTimeout(() => {this.firePopup();}, 1000);\n          \n      },\n      cancelSaveProperty() {\n          this.icon = \"fa-regular fa-heart fa-2xl\";\n      },\n      firePopup() {\n          this.isVisible = \"visibility: visible\";\n      },\n      closePopup() {\n          this.isVisible = \"visibility: hidden\";\n      },\n  },\n};\n</script>\n\n<style>\na.button-demo {\n    color: #fff !important;\n    background-color: #5457c1;\n    display: inline-block;\n    line-height: 1;\n    white-space: nowrap;\n    cursor: pointer;\n    border: 1px solid #5457c1;\n    -webkit-appearance: none;\n    text-align: center;\n    box-sizing: border-box;\n    outline: none;\n    margin: 0;\n    transition: 0.1s;\n    font-weight: 500;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    padding: 10px 20px !important;\n    font-size: 14px;\n    border-radius: 3px;\n};\n\na.button-demo:hover {\n    background: #c679e3;\n    border-color: #c679e3;\n    color: #fff;\n}\n\na.button-demo:active {\n    background: #c679e3;\n    border-color: #c679e3;\n    color: #fff;\n}\n\na.postcode-type {\n    color: #5457c1; \n    font-weight: 500;\n}\n\na.postcode-type:hover {\n    color: #5457c1;\n    text-decoration: rgba(84,87,193, 0.4) underline;\n    transition: none;\n}\n\n.address {\n  color: #a3a2a2; \n  font-size: 11px;\n}\n\n.property-img {\n   height: 40px; \n   border-radius: 15%;\n}\n\n\n/* Popup container - can be anything you want */\n.popup {\n  cursor: pointer;\n}\n\n/* The actual popup */\n.popuptext {\n  font-family: Poppins;\n  font-size: 16px;\n  background-color: #F5F7FA;\n  text-align: center;\n  border: thick double #5457c1;\n  border-radius: 10px;\n  padding: 10px 20px 30px;\n  position: fixed;\n  width: 600px;\n  height: 360px;\n  top: 30%;\n  left: 50%;\n  margin-top: -180px; /* Negative half of height. */\n  margin-left: -300px; /* Negative half of width. */\n  z-index: 1;\n}\n\n.popuptext p {\n    color: #0e314c;\n}\n\n.btn-primary.btn-property {\n  margin-top: 3rem; \n  background-color: #c679e3;\n  box-shadow: 0 13px 27px 0 rgba(198, 121, 227, 0.25);\n}\n\n</style>\n"]}]}