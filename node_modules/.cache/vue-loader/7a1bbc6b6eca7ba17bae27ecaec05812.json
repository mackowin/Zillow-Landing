{"remainingRequest":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/src/components/home/Feedback.vue?vue&type=template&id=14b01875&","dependencies":[{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/src/components/home/Feedback.vue","mtime":1651859070637},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1611962713166},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/Tutors/Code/Tutomy-frontend/node_modules/vue-loader/lib/index.js","mtime":1611962713166}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}