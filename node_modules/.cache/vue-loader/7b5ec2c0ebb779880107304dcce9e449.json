{"remainingRequest":"/Users/nataliamackowiak/Documents/Startup/Ideas/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nataliamackowiak/Documents/Startup/Ideas/src/ideas/green-card/GreenCardEvaluationContinued.vue?vue&type=template&id=182211c7&","dependencies":[{"path":"/Users/nataliamackowiak/Documents/Startup/Ideas/src/ideas/green-card/GreenCardEvaluationContinued.vue","mtime":1669230295526},{"path":"/Users/nataliamackowiak/Documents/Startup/Ideas/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/Ideas/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1611962713166},{"path":"/Users/nataliamackowiak/Documents/Startup/Ideas/node_modules/cache-loader/dist/cjs.js","mtime":1611962706588},{"path":"/Users/nataliamackowiak/Documents/Startup/Ideas/node_modules/vue-loader/lib/index.js","mtime":1611962713166}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}